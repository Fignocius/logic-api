// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/fignocius/logic-api/api/model"
	mock "github.com/stretchr/testify/mock"

	url "net/url"

	uuid "github.com/satori/go.uuid"
)

// LogicService is an autogenerated mock type for the LogicService type
type LogicService struct {
	mock.Mock
}

// Apply provides a mock function with given fields: _a0, _a1
func (_m *LogicService) Apply(_a0 uuid.UUID, _a1 url.Values) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, url.Values) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, url.Values) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, url.Values) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *LogicService) Delete(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *LogicService) List() ([]model.Logic, error) {
	ret := _m.Called()

	var r0 []model.Logic
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Logic, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Logic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Logic)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0
func (_m *LogicService) Upsert(_a0 model.Logic) (model.Logic, error) {
	ret := _m.Called(_a0)

	var r0 model.Logic
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Logic) (model.Logic, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Logic) model.Logic); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Logic)
	}

	if rf, ok := ret.Get(1).(func(model.Logic) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogicService interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogicService creates a new instance of LogicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogicService(t mockConstructorTestingTNewLogicService) *LogicService {
	mock := &LogicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
